# Docker Compose 설정 파일
# PACS Extension Server - 전체 스택 구성

version: '3.8'

services:
  # =============================================================================
  # PostgreSQL 데이터베이스
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: pacs-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pacs_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pacs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-pacs_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Redis (캐싱 및 세션 저장소)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: pacs-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - pacs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # MinIO (S3 호환 객체 저장소)
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: pacs-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - pacs-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # PACS Extension Server (메인 애플리케이션)
  # =============================================================================
  pacs-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pacs-server
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      # 서버 설정
      APP_SERVER_HOST: ${APP_SERVER_HOST:-0.0.0.0}
      APP_SERVER_PORT: ${APP_SERVER_PORT:-8080}
      
      # 데이터베이스 설정
      APP_DATABASE_URL: ${APP_DATABASE_URL:-postgres://admin:admin123@postgres:5432/pacs_db}
      APP_DATABASE_POOL_SIZE: ${APP_DATABASE_POOL_SIZE:-10}
      APP_DATABASE_TIMEOUT: ${APP_DATABASE_TIMEOUT:-30}
      
      # Redis 설정
      APP_REDIS_URL: ${APP_REDIS_URL:-redis://redis:6379}
      APP_REDIS_POOL_SIZE: ${APP_REDIS_POOL_SIZE:-10}
      
      # JWT 설정
      APP_JWT_SECRET: ${APP_JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      APP_JWT_EXPIRATION: ${APP_JWT_EXPIRATION:-3600}
      
      # CORS 설정
      APP_CORS_ALLOWED_ORIGINS: ${APP_CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      APP_CORS_ALLOWED_METHODS: ${APP_CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      APP_CORS_ALLOWED_HEADERS: ${APP_CORS_ALLOWED_HEADERS:-Content-Type,Authorization,X-User-ID}
      APP_CORS_EXPOSE_HEADERS: ${APP_CORS_EXPOSE_HEADERS:-X-Total-Count,X-Page-Count}
      APP_CORS_MAX_AGE: ${APP_CORS_MAX_AGE:-3600}
      
      # 객체 저장소 설정
      APP_OBJECT_STORAGE_PROVIDER: ${APP_OBJECT_STORAGE_PROVIDER:-minio}
      APP_OBJECT_STORAGE_ENDPOINT: ${APP_OBJECT_STORAGE_ENDPOINT:-http://minio:9000}
      APP_OBJECT_STORAGE_ACCESS_KEY: ${APP_OBJECT_STORAGE_ACCESS_KEY:-minioadmin}
      APP_OBJECT_STORAGE_SECRET_KEY: ${APP_OBJECT_STORAGE_SECRET_KEY:-minioadmin123}
      APP_OBJECT_STORAGE_BUCKET: ${APP_OBJECT_STORAGE_BUCKET:-pacs-masks}
      APP_OBJECT_STORAGE_REGION: ${APP_OBJECT_STORAGE_REGION:-us-east-1}
      
      # 서명된 URL 설정
      APP_SIGNED_URL_EXPIRATION: ${APP_SIGNED_URL_EXPIRATION:-3600}
      
      # 로깅 설정
      RUST_LOG: ${RUST_LOG:-info}
      RUST_BACKTRACE: ${RUST_BACKTRACE:-1}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pacs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Nginx (리버스 프록시 및 로드 밸런서)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: pacs-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - pacs-server
    networks:
      - pacs-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# 네트워크 설정
# =============================================================================
networks:
  pacs-network:
    driver: bridge
    name: pacs-network

# =============================================================================
# 볼륨 설정
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: pacs-postgres-data
  redis_data:
    driver: local
    name: pacs-redis-data
  minio_data:
    driver: local
    name: pacs-minio-data

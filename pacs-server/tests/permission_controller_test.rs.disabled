use actix_web::{test, web, App, HttpResponse};
use serde_json::json;
use std::sync::Arc;

use pacs_server::application::dto::permission_dto::{
    RoleWithPermissionsResponse, RolesWithPermissionsListResponse, PaginationQuery
};
use pacs_server::application::use_cases::permission_use_case::PermissionUseCase;
use pacs_server::domain::services::permission_service::PermissionService;
use pacs_server::domain::entities::{Role, Permission};
use pacs_server::domain::errors::ServiceError;
use async_trait::async_trait;
use mockall::mock;

// Mock PermissionService for testing
mock! {
    PermissionService {}

    #[async_trait]
    impl PermissionService for PermissionService {
        async fn get_permissions_for_resource(&self, resource_type: &str) -> Result<Vec<Permission>, ServiceError>;
        async fn validate_permission_exists(&self, resource_type: &str, action: &str) -> Result<bool, ServiceError>;
        async fn create_role(&self, name: String, scope: pacs_server::domain::entities::RoleScope, description: Option<String>) -> Result<Role, ServiceError>;
        async fn get_role(&self, id: i32) -> Result<Role, ServiceError>;
        async fn update_role(&self, id: i32, name: Option<String>, description: Option<String>) -> Result<Role, ServiceError>;
        async fn delete_role(&self, id: i32) -> Result<(), ServiceError>;
        async fn get_roles_by_scope(&self, scope: pacs_server::domain::entities::RoleScope) -> Result<Vec<Role>, ServiceError>;
        async fn get_global_roles(&self) -> Result<Vec<Role>, ServiceError>;
        async fn get_project_roles(&self) -> Result<Vec<Role>, ServiceError>;
        async fn assign_permission_to_role(&self, role_id: i32, permission_id: i32) -> Result<(), ServiceError>;
        async fn remove_permission_from_role(&self, role_id: i32, permission_id: i32) -> Result<(), ServiceError>;
        async fn get_role_permissions(&self, role_id: i32) -> Result<Vec<Permission>, ServiceError>;
        async fn assign_permission_to_project(&self, project_id: i32, permission_id: i32) -> Result<(), ServiceError>;
        async fn remove_permission_from_project(&self, project_id: i32, permission_id: i32) -> Result<(), ServiceError>;
        async fn get_project_permissions(&self, project_id: i32) -> Result<Vec<Permission>, ServiceError>;
        async fn get_global_role_permission_matrix(&self) -> Result<(Vec<Role>, Vec<Permission>, Vec<(i32, i32)>), ServiceError>;
        async fn get_project_role_permission_matrix(&self, project_id: i32) -> Result<(Vec<Role>, Vec<Permission>, Vec<(i32, i32)>), ServiceError>;
    }
}

// 테스트용 핸들러 함수
async fn get_global_roles_with_permissions_handler(
    permission_use_case: web::Data<Arc<PermissionUseCase<MockPermissionService>>>,
    query: web::Query<PaginationQuery>,
) -> HttpResponse {
    match permission_use_case
        .get_global_roles_with_permissions(query.page, query.page_size)
        .await
    {
        Ok(response) => HttpResponse::Ok().json(response),
        Err(e) => HttpResponse::InternalServerError().json(json!({
            "error": format!("Failed to get global roles with permissions: {}", e)
        })),
    }
}

/// 테스트용 앱 생성 - 더 간단한 방식
fn create_test_app() -> impl actix_web::dev::ServiceFactory<actix_web::dev::ServiceRequest, actix_web::dev::ServiceResponse, actix_web::Error, actix_web::dev::Config> {
    let mut mock_service = MockPermissionService::new();
    
    // Mock 데이터 설정
    mock_service.expect_get_global_roles()
        .returning(|| {
            Ok(vec![
                Role {
                    id: 1,
                    name: "Admin".to_string(),
                    description: Some("Administrator".to_string()),
                    scope: "GLOBAL".to_string(),
                },
                Role {
                    id: 2,
                    name: "User".to_string(),
                    description: Some("Regular User".to_string()),
                    scope: "GLOBAL".to_string(),
                },
            ])
        });
    
    mock_service.expect_get_role_permissions()
        .returning(|_role_id| {
            Ok(vec![
                Permission {
                    id: 1,
                    resource_type: "user".to_string(),
                    action: "create".to_string(),
                },
                Permission {
                    id: 2,
                    resource_type: "user".to_string(),
                    action: "read".to_string(),
                },
            ])
        });

    let permission_use_case = PermissionUseCase::new(Arc::new(mock_service));
    
    App::new()
        .app_data(web::Data::new(permission_use_case))
        .service(
            web::scope("/api/roles")
                .route("/global/with-permissions", web::get().to(get_global_roles_with_permissions_handler))
        )
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_basic() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 기본 페이지네이션 테스트
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    // 응답 상태 확인
    assert!(resp.status().is_success() || resp.status().is_server_error());
    // 실제 테스트에서는 데이터베이스가 설정되어 있어야 합니다
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_pagination() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 커스텀 페이지네이션 테스트
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions?page=2&page_size=10")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    // 응답 상태 확인
    assert!(resp.status().is_success() || resp.status().is_server_error());
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_invalid_params() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 잘못된 페이지네이션 파라미터 테스트
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions?page=0&page_size=200")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    // 응답 상태 확인 (잘못된 파라미터는 기본값으로 처리되어야 함)
    assert!(resp.status().is_success() || resp.status().is_server_error());
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_response_structure() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    if resp.status().is_success() {
        let body: serde_json::Value = test::read_body_json(resp).await;
        
        // 응답 구조 확인
        assert!(body.get("roles").is_some());
        assert!(body.get("total_count").is_some());
        assert!(body.get("page").is_some());
        assert!(body.get("page_size").is_some());
        assert!(body.get("total_pages").is_some());
        
        // roles가 배열인지 확인
        if let Some(roles) = body.get("roles") {
            assert!(roles.is_array());
            
            // 각 역할에 권한 정보가 포함되어 있는지 확인
            if let Some(roles_array) = roles.as_array() {
                for role in roles_array {
                    assert!(role.get("id").is_some());
                    assert!(role.get("name").is_some());
                    assert!(role.get("scope").is_some());
                    assert!(role.get("permissions").is_some());
                    
                    // permissions가 배열인지 확인
                    if let Some(permissions) = role.get("permissions") {
                        assert!(permissions.is_array());
                    }
                }
            }
        }
    }
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_empty_result() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 빈 결과 테스트 (존재하지 않는 페이지)
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions?page=999&page_size=10")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    if resp.status().is_success() {
        let body: serde_json::Value = test::read_body_json(resp).await;
        
        // 빈 결과 확인
        if let Some(roles) = body.get("roles") {
            assert!(roles.is_array());
            if let Some(roles_array) = roles.as_array() {
                assert_eq!(roles_array.len(), 0);
            }
        }
        
        // 페이지네이션 정보 확인
        if let Some(total_count) = body.get("total_count") {
            assert_eq!(total_count.as_i64().unwrap_or(0), 0);
        }
    }
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_default_values() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 파라미터 없이 요청 (기본값 사용)
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    if resp.status().is_success() {
        let body: serde_json::Value = test::read_body_json(resp).await;
        
        // 기본값 확인
        if let Some(page) = body.get("page") {
            assert_eq!(page.as_i64().unwrap_or(0), 1);
        }
        
        if let Some(page_size) = body.get("page_size") {
            assert_eq!(page_size.as_i64().unwrap_or(0), 20);
        }
    }
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_max_page_size() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 최대 페이지 크기 테스트
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions?page_size=100")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    if resp.status().is_success() {
        let body: serde_json::Value = test::read_body_json(resp).await;
        
        // 최대 페이지 크기 확인 (100으로 제한)
        if let Some(page_size) = body.get("page_size") {
            assert!(page_size.as_i64().unwrap_or(0) <= 100);
        }
    }
}

#[tokio::test]
async fn test_get_global_roles_with_permissions_negative_page() {
    let app = test::init_service(create_test_app()).await.unwrap();
    
    // 음수 페이지 테스트
    let req = test::TestRequest::get()
        .uri("/api/roles/global/with-permissions?page=-1")
        .to_request();
    
    let resp = req.send_request(&app).await;
    
    if resp.status().is_success() {
        let body: serde_json::Value = test::read_body_json(resp).await;
        
        // 음수 페이지는 1로 처리되어야 함
        if let Some(page) = body.get("page") {
            assert_eq!(page.as_i64().unwrap_or(0), 1);
        }
    }
}